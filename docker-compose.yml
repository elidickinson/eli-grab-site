services:
  # PIA VPN service that routes all traffic
  vpn:
    image: qmcgaw/private-internet-access:latest
    cap_add:
      - NET_ADMIN  # Required for VPN networking
    devices:
      - /dev/net/tun  # Required for VPN tunneling
    restart: unless-stopped
    environment:
      # Load PIA credentials from environment variables
      - USER=${PIA_USERNAME}
      - PASSWORD=${PIA_PASSWORD}
      # Choose your preferred region (from .env)
      - REGION=${REGION:-US East}
      # Optional: Choose encryption level (normal or strong)
      - ENCRYPTION=${ENCRYPTION:-strong}
      # Optional: Choose protocol (udp or tcp)
      - PROTOCOL=${PROTOCOL:-udp}
    # Create a named network for containers to join
    networks:
      - vpn_network

  # Custom grab-site container (forced to amd64)
  grabsite:
    platform: linux/amd64
    build:
      context: ./grabsite
      dockerfile: Dockerfile
    depends_on:
      - vpn
    # Connect to the VPN network - routes all traffic through the VPN
    network_mode: "service:vpn"
    volumes:
      - ./warc:/warc  # Store WARC files in local directory
      - ./logs:/logs  # Store logs in local directory
      - ./sites:/sites  # Directory for crawler configurations
    # Start the dashboard server by default
    command: gs-server --bind 0.0.0.0
    environment:
      - GRAB_SITE_WS_URL=ws://vpn:29000
    # Wait for VPN and ensure server is ready
    entrypoint: ["/bin/sh", "-c", "echo 'Waiting for VPN and server...' && while ! ping -c 1 -W 1 1.1.1.1; do sleep 1; done && echo 'VPN connected' && exec $0 $@"]

  # Expose the WebSocket port through VPN
  vpn:
    ports:
      - "29000:29000"

  # Network utilities container (not started automatically)
  netutils:
    image: nicolaka/netshoot:latest
    depends_on:
      - vpn
    network_mode: "service:vpn"  # Route through VPN
    volumes:
      - ./utils:/utils  # Optional shared volume for scripts or results
    stdin_open: true  # Keep STDIN open
    tty: true  # Allocate a pseudo-TTY
    restart: "no"  # Don't start automatically

networks:
  vpn_network:
    driver: bridge
